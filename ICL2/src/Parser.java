/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.PrintStream;
import java.io.FileOutputStream;

/** ID lister. */
public class Parser implements ParserConstants {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(new Environment()).toString() );

        //CodeBlock c = new CodeBlock();
        //exp.compile(c, new Environment());
        //FileOutputStream file = new FileOutputStream("FinishFile.j");
        //c.dump(new PrintStream(file));


    }catch (TypeError e) {
          e.printStackTrace();
      parser.ReInit(System.in);
    }
     catch (NotFound e) {
          e.printStackTrace();
      parser.ReInit(System.in);
    }
     catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    t = Seq();
    jj_consume_token(ELEND);
    jj_consume_token(EL);
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Seq() throws ParseException {
  ASTNode t1,t2;
  ASTSeq seq;
            seq = new ASTSeq();
    t1 = Eq();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EL);
    }
                                                    seq.addNode(t1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEQ);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(EL);
      }
      t2 = Eq();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(EL);
      }
                                                                                                         seq.addNode(t2);
    }
                  {if (true) return seq;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Eq() throws ParseException {
  Token op;
  ASTNode t1,t2;
    t1 = Exp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(EL);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case COMPEQ:
      case BIGGER:
      case SMALLER:
      case SMALLEQ:
      case BIGEQ:
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPEQ:
        op = jj_consume_token(COMPEQ);
        break;
      case ASSIGN:
        op = jj_consume_token(ASSIGN);
        break;
      case BIGGER:
        op = jj_consume_token(BIGGER);
        break;
      case SMALLER:
        op = jj_consume_token(SMALLER);
        break;
      case SMALLEQ:
        op = jj_consume_token(SMALLEQ);
        break;
      case BIGEQ:
        op = jj_consume_token(BIGEQ);
        break;
      case AND:
        op = jj_consume_token(AND);
        break;
      case OR:
        op = jj_consume_token(OR);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        jj_consume_token(EL);
      }
      t2 = Exp();
                           if (op.kind == ASSIGN)
                                t1 = new ASTAssign(t1,t2);
                        else if (op.kind == COMPEQ)
                                t1 = new ASTEq(t1,t2, op.image);
                        else if (op.kind == BIGGER)
                                t1 = new ASTEq(t1,t2, op.image);
                        else if (op.kind == SMALLER)
                                t1 = new ASTEq(t1,t2, op.image);
                        else if (op.kind == SMALLEQ)
                                t1 = new ASTEq(t1,t2, op.image);
                        else if (op.kind == BIGEQ)
                                t1 = new ASTEq(t1,t2,op.image);
                        else if (op.kind == AND)
                                t1 = new ASTLogic(t1,t2,op.image);
                        else if (op.kind == OR)
                                t1 = new ASTLogic(t1,t2,op.image);
    }
          {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      jj_consume_token(EL);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
        jj_consume_token(EL);
      }
      t2 = Term();
                   if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Fact();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_11;
      }
      jj_consume_token(EL);
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
      case REST:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      case REST:
        op = jj_consume_token(REST);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_13;
        }
        jj_consume_token(EL);
      }
      t2 = Fact();
                   if (op.kind == TIMES)
                                t1 = new ASTTimes(t1,t2);
                                else if(op.kind ==DIV) t1 = new ASTDiv(t1,t2);
                                else t1 = new ASTRest(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  Token n, id;
  ASTNode t, t1, t2, body;
  ASTDef def;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_14;
        }
        jj_consume_token(EL);
      }
                       t = new ASTNum( new VInt(Integer.parseInt(n.image)));
      break;
    case TRUE:
      id = jj_consume_token(TRUE);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_15;
        }
        jj_consume_token(EL);
      }
                           t= new ASTBool(id.image);
      break;
    case FALSE:
      id = jj_consume_token(FALSE);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_16;
        }
        jj_consume_token(EL);
      }
                            t= new ASTBool(id.image);
      break;
    case NOT:
      jj_consume_token(NOT);
      t1 = Seq();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_17;
        }
        jj_consume_token(EL);
      }
                                  t= new ASTNot(t1);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_18;
        }
        jj_consume_token(EL);
      }
      t = Seq();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_19;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(RPAR);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_20;
        }
        jj_consume_token(EL);
      }
                         t = new ASTTimes(new ASTNum( new VInt(-1)), Fact() );
      break;
    case PLUS:
      jj_consume_token(PLUS);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_21;
        }
        jj_consume_token(EL);
      }
                        t = Fact();
      break;
    case DEF:
      jj_consume_token(DEF);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_22;
        }
        jj_consume_token(EL);
      }
                       def= new ASTDef();
      label_23:
      while (true) {
        id = jj_consume_token(Id);
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_24;
          }
          jj_consume_token(EL);
        }
        jj_consume_token(EQ);
        t1 = Seq();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_25;
          }
          jj_consume_token(EL);
        }
                                                                                             def.add(id.image,t1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Id:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_23;
        }
      }
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_26;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(IN);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_27;
        }
        jj_consume_token(EL);
      }
      body = Seq();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_28;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(END);
                                                                                                                                                                            t =def.body(body) ;
      break;
    case Id:
      id = jj_consume_token(Id);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_29;
        }
        jj_consume_token(EL);
      }
                       t = new ASTId(id.image);
      break;
    case NEW:
      jj_consume_token(NEW);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_30;
        }
        jj_consume_token(EL);
      }
                       t = new ASTNew(Seq());
      break;
    case DREF:
      jj_consume_token(DREF);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_31;
        }
        jj_consume_token(EL);
      }
      t1 = Fact();
                                     t = new ASTRef(t1);
      break;
    case IF:
      jj_consume_token(IF);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_32;
        }
        jj_consume_token(EL);
      }
      body = Seq();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_33;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(THEN);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_34;
        }
        jj_consume_token(EL);
      }
      t1 = Seq();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_35;
        }
        jj_consume_token(EL);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_36;
          }
          jj_consume_token(EL);
        }
        t2 = Seq();
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_37;
          }
          jj_consume_token(EL);
        }
        jj_consume_token(END);
                                                                                                                         t = new ASTIf(body, t1, t2) ;
        break;
      case END:
        jj_consume_token(END);
                                                                                                                                                                     t = new ASTIf(body, t1, null);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_38;
        }
        jj_consume_token(EL);
      }
      t1 = Seq();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_39;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(DO);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_40;
        }
        jj_consume_token(EL);
      }
      t2 = Seq();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_41;
        }
        jj_consume_token(EL);
      }
      jj_consume_token(END);
                                                                                    t = new ASTWhile(t1,t2);
      break;
    case PRINT:
      jj_consume_token(PRINT);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_42;
        }
        jj_consume_token(EL);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case DREF:
      case NEW:
      case TRUE:
      case FALSE:
      case IF:
      case WHILE:
      case PRINT:
      case PRINTLN:
      case NOT:
      case Id:
      case Num:
      case PLUS:
      case MINUS:
      case LPAR:
        t1 = Eq();
                                  t = new ASTPrint(t1);
        break;
      default:
        jj_la1[46] = jj_gen;
                                                              t = new ASTPrint(null);
      }
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_43;
        }
        jj_consume_token(EL);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case DREF:
      case NEW:
      case TRUE:
      case FALSE:
      case IF:
      case WHILE:
      case PRINT:
      case PRINTLN:
      case NOT:
      case Id:
      case Num:
      case PLUS:
      case MINUS:
      case LPAR:
        t1 = Eq();
                                    t = new ASTPrintln(t1);
        break;
      default:
        jj_la1[48] = jj_gen;
                                                                  t = new ASTPrintln(null);
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x600f820,0x600f820,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100100,0x0,0x0,0x0,0x0,0x0,0xf9a70250,0x0,0xf9a70250,0xf9a70250,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x40,0x80,0x80,0x80,0x0,0x0,0x80,0x80,0x0,0x0,0x80,0x80,0x7,0x7,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x0,0x80,0x80,0x80,0x80,0x80,0x8,0x80,0x8,0x8,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
